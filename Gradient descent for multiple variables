function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)

  %GRADIENTDESCENT Performs gradient descent to learn theta
  %   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by 
  %   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

h = (X * theta);
    error = (h - y);
    change =(X' * error);
    final = ((change / m) *alpha)
    theta = theta - final;
        J_history(iter) = computeCost(X, y, theta),
end

end
